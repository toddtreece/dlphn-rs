/* tslint:disable */
/* eslint-disable */
/**
 * dlphn-rs
 * A simple data logging server written in Rust.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Data,
    DataFromJSON,
    DataToJSON,
} from '../models';

export interface AddDataRequest {
    key: string;
    body: object;
}

export interface ListDataRequest {
    key: string;
}

/**
 * no description
 */
export class DataApi extends runtime.BaseAPI {

    /**
     * Add data to a stream
     */
    async addDataRaw(requestParameters: AddDataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling addData.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/streams/{key}/data`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add data to a stream
     */
    async addData(requestParameters: AddDataRequest): Promise<void> {
        await this.addDataRaw(requestParameters);
    }

    /**
     * List logged data for stream
     */
    async listDataRaw(requestParameters: ListDataRequest): Promise<runtime.ApiResponse<Array<Data>>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling listData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/streams/{key}/data`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataFromJSON));
    }

    /**
     * List logged data for stream
     */
    async listData(requestParameters: ListDataRequest): Promise<Array<Data>> {
        const response = await this.listDataRaw(requestParameters);
        return await response.value();
    }

}
